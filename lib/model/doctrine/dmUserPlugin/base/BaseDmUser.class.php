<?php

/**
 * BaseDmUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $email
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property integer $country_id
 * @property string $first_name
 * @property string $last_name
 * @property string $profession
 * @property string $zip_code
 * @property string $street
 * @property string $city
 * @property boolean $is_letter_actu
 * @property boolean $is_letter_action
 * @property integer $photo_id
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $Permissions
 * @property Country $Country
 * @property DmMedia $Photo
 * @property Doctrine_Collection $DmLock
 * @property Doctrine_Collection $DmUserPermission
 * @property Doctrine_Collection $DmUserGroup
 * @property DmRememberKey $RememberKeys
 * @property Doctrine_Collection $SignedPetitions
 * @property Doctrine_Collection $Collectes
 * @property Doctrine_Collection $Signature
 * 
 * @method string              getUsername()         Returns the current record's "username" value
 * @method string              getEmail()            Returns the current record's "email" value
 * @method string              getAlgorithm()        Returns the current record's "algorithm" value
 * @method string              getSalt()             Returns the current record's "salt" value
 * @method string              getPassword()         Returns the current record's "password" value
 * @method boolean             getIsActive()         Returns the current record's "is_active" value
 * @method boolean             getIsSuperAdmin()     Returns the current record's "is_super_admin" value
 * @method timestamp           getLastLogin()        Returns the current record's "last_login" value
 * @method integer             getCountryId()        Returns the current record's "country_id" value
 * @method string              getFirstName()        Returns the current record's "first_name" value
 * @method string              getLastName()         Returns the current record's "last_name" value
 * @method string              getProfession()       Returns the current record's "profession" value
 * @method string              getZipCode()          Returns the current record's "zip_code" value
 * @method string              getStreet()           Returns the current record's "street" value
 * @method string              getCity()             Returns the current record's "city" value
 * @method boolean             getIsLetterActu()     Returns the current record's "is_letter_actu" value
 * @method boolean             getIsLetterAction()   Returns the current record's "is_letter_action" value
 * @method integer             getPhotoId()          Returns the current record's "photo_id" value
 * @method Doctrine_Collection getGroups()           Returns the current record's "Groups" collection
 * @method Doctrine_Collection getPermissions()      Returns the current record's "Permissions" collection
 * @method Country             getCountry()          Returns the current record's "Country" value
 * @method DmMedia             getPhoto()            Returns the current record's "Photo" value
 * @method Doctrine_Collection getDmLock()           Returns the current record's "DmLock" collection
 * @method Doctrine_Collection getDmUserPermission() Returns the current record's "DmUserPermission" collection
 * @method Doctrine_Collection getDmUserGroup()      Returns the current record's "DmUserGroup" collection
 * @method DmRememberKey       getRememberKeys()     Returns the current record's "RememberKeys" value
 * @method Doctrine_Collection getSignedPetitions()  Returns the current record's "SignedPetitions" collection
 * @method Doctrine_Collection getCollectes()        Returns the current record's "Collectes" collection
 * @method Doctrine_Collection getSignature()        Returns the current record's "Signature" collection
 * @method DmUser              setUsername()         Sets the current record's "username" value
 * @method DmUser              setEmail()            Sets the current record's "email" value
 * @method DmUser              setAlgorithm()        Sets the current record's "algorithm" value
 * @method DmUser              setSalt()             Sets the current record's "salt" value
 * @method DmUser              setPassword()         Sets the current record's "password" value
 * @method DmUser              setIsActive()         Sets the current record's "is_active" value
 * @method DmUser              setIsSuperAdmin()     Sets the current record's "is_super_admin" value
 * @method DmUser              setLastLogin()        Sets the current record's "last_login" value
 * @method DmUser              setCountryId()        Sets the current record's "country_id" value
 * @method DmUser              setFirstName()        Sets the current record's "first_name" value
 * @method DmUser              setLastName()         Sets the current record's "last_name" value
 * @method DmUser              setProfession()       Sets the current record's "profession" value
 * @method DmUser              setZipCode()          Sets the current record's "zip_code" value
 * @method DmUser              setStreet()           Sets the current record's "street" value
 * @method DmUser              setCity()             Sets the current record's "city" value
 * @method DmUser              setIsLetterActu()     Sets the current record's "is_letter_actu" value
 * @method DmUser              setIsLetterAction()   Sets the current record's "is_letter_action" value
 * @method DmUser              setPhotoId()          Sets the current record's "photo_id" value
 * @method DmUser              setGroups()           Sets the current record's "Groups" collection
 * @method DmUser              setPermissions()      Sets the current record's "Permissions" collection
 * @method DmUser              setCountry()          Sets the current record's "Country" value
 * @method DmUser              setPhoto()            Sets the current record's "Photo" value
 * @method DmUser              setDmLock()           Sets the current record's "DmLock" collection
 * @method DmUser              setDmUserPermission() Sets the current record's "DmUserPermission" collection
 * @method DmUser              setDmUserGroup()      Sets the current record's "DmUserGroup" collection
 * @method DmUser              setRememberKeys()     Sets the current record's "RememberKeys" value
 * @method DmUser              setSignedPetitions()  Sets the current record's "SignedPetitions" collection
 * @method DmUser              setCollectes()        Sets the current record's "Collectes" collection
 * @method DmUser              setSignature()        Sets the current record's "Signature" collection
 * 
 * @package    ape-petition
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7200 2010-02-21 09:37:37Z beberlei $
 */
abstract class BaseDmUser extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('dm_user');
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '255',
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => '128',
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => '128',
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => '128',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('profession', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
        $this->hasColumn('zip_code', 'string', 6, array(
             'type' => 'string',
             'length' => '6',
             ));
        $this->hasColumn('street', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('is_letter_actu', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('is_letter_action', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('photo_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('DmGroup as Groups', array(
             'refClass' => 'DmUserGroup',
             'local' => 'dm_user_id',
             'foreign' => 'dm_group_id'));

        $this->hasMany('DmPermission as Permissions', array(
             'refClass' => 'DmUserPermission',
             'local' => 'dm_user_id',
             'foreign' => 'dm_permission_id'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('DmMedia as Photo', array(
             'local' => 'photo_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasMany('DmLock', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('DmUserPermission', array(
             'local' => 'id',
             'foreign' => 'dm_user_id'));

        $this->hasMany('DmUserGroup', array(
             'local' => 'id',
             'foreign' => 'dm_user_id'));

        $this->hasOne('DmRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'dm_user_id'));

        $this->hasMany('Petition as SignedPetitions', array(
             'refClass' => 'Signature',
             'local' => 'dm_user_id',
             'foreign' => 'petition_id'));

        $this->hasMany('Collecte as Collectes', array(
             'local' => 'id',
             'foreign' => 'dm_user_id'));

        $this->hasMany('Signature', array(
             'local' => 'id',
             'foreign' => 'dm_user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}