<?php

/**
 * Petition
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ape-petition
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7294 2010-03-02 17:59:20Z jwage $
 */
class Petition extends BasePetition
{

  public function getNextAction()
  {
    return dmDb::table('Action')->getNext($this);
  }

  public function getNbSignatures()
  {
    return dmDb::query('Signature s')
    ->where('s.petition_id = ?', $this->id)
    ->count();
  }

  public function getNbCollections()
  {
    return dmDb::query('Collection c')
    ->where('c.petition_id = ?', $this->id)
    ->count();
  }

  public function getActiveProducts()
  {
    return $this->getActiveRelatedRecord('Products');
  }

  public function getActivePartners()
  {
    return $this->getActiveRelatedRecord('Partners');
  }

  public function getActiveCollections()
  {
    return $this->getActiveRelatedRecord('Collections');
  }

  public function getBestActiveCollections($number = 10)
  {
    return dmDb::query('Collection c')
    ->leftJoin('c.User u')
    ->leftJoin('c.Signatures s')
    ->select('c.goal, u.first_name, u.last_name, COUNT(s.id) as nb')
    ->groupBy('c.id')
    ->where('c.petition_id = ?', $this->id)
    ->andWhere('c.is_active = ?', true)
    ->limit(10)
    ->fetchRecords();
  }

  protected function getActiveRelatedRecord($relationAlias)
  {
    $records = $this->get($relationAlias)->getData();

    foreach($records as $index => $record)
    {
      if(!$record->isActive)
      {
        unset($records[$index]);
      }
    }

    return $records;
  }

  public function getActuFeedItems()
  {
    try
    {
      return $this->getFeedItems($this->actu_feed_url);
    }
    catch(Exception $e)
    {
      return array();
    }
  }

  public function getCommuniqueFeedItems()
  {
    try
    {
      return $this->getFeedItems($this->communique_feed_url);
    }
    catch(Exception $e)
    {
      return array();
    }
  }

  protected function getFeedItems($url)
  {
    if(!$url || !$this->getServiceContainer())
    {
      return array();
    }

    $cache = $this->getService('cache_manager')->getCache('petition');

    if(!$items = $cache->get($url))
    {
      $browser = $this->getService('web_browser');

      if($browser->get($url)->responseIsError())
      {
        throw new dmException(sprintf('The given URL (%s) returns an error (%s: %s)', $url, $browser->getResponseCode(), $browser->getResponseMessage()));
      }

      $items = sfFeedPeer::createFromXml($browser->getResponseText(), $url)->getItems();

      $cache->set($url, $items);
    }

    return $items;
  }

}
